{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to STM32MP1 Wiki Overview This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!) Introduction The STM32MP157C-DK2 Discovery kits leverage the capabilities of STM32MP1 Series microprocessors to allow users easily develop applications using STM32 MPU OpenSTLinux Distribution software for the main processor and STM32CubeMP1 software for the co-processor. They include: STM32MP157 Arm\u00ae-based dual Cortex\u00ae-A7 32 bits + Cortex\u00ae-M4 32 bits MPU in TFBGA361 package ST PMIC STPMIC1 4-Gbit DDR3L, 16 bits, 533 MHz 1-Gbps Ethernet (RGMII) compliant with IEEE-802.3ab USB OTG HS Audio codec 4 user LEDs 2 user and reset push-buttons, 1 wake-up button 5 V / 3 A USB Type-CTM power supply input Board connectors:Ethernet RJ454 \u00d7 USB Host Type-AUSB Type-CTM DRPMIPI DSISMHDMI\u00aeStereo headset jack including analog microphone inputmicroSDTM cardGPIO expansion connector (Raspberry Pi\u00ae shields capability)ARDUINO\u00ae Uno V3 expansion connectors On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: Virtual COM port and debug port STM32CubeMP1 and full mainline open-source Linux\u00ae STM32 MPU OpenSTLinux Distribution (such as STM32MP1Starter) software and examples 4\" TFT 480\u00d7800 pixels with LED backlight, MIPI DSISM interface, and capacitive touch panel Wi-Fi\u00ae 802.11b/g/n Bluetooth Low Energy 4.1","title":"Home"},{"location":"#welcome-to-stm32mp1-wiki","text":"","title":"Welcome to STM32MP1 Wiki"},{"location":"#overview","text":"This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!)","title":"Overview"},{"location":"#introduction","text":"The STM32MP157C-DK2 Discovery kits leverage the capabilities of STM32MP1 Series microprocessors to allow users easily develop applications using STM32 MPU OpenSTLinux Distribution software for the main processor and STM32CubeMP1 software for the co-processor. They include: STM32MP157 Arm\u00ae-based dual Cortex\u00ae-A7 32 bits + Cortex\u00ae-M4 32 bits MPU in TFBGA361 package ST PMIC STPMIC1 4-Gbit DDR3L, 16 bits, 533 MHz 1-Gbps Ethernet (RGMII) compliant with IEEE-802.3ab USB OTG HS Audio codec 4 user LEDs 2 user and reset push-buttons, 1 wake-up button 5 V / 3 A USB Type-CTM power supply input Board connectors:Ethernet RJ454 \u00d7 USB Host Type-AUSB Type-CTM DRPMIPI DSISMHDMI\u00aeStereo headset jack including analog microphone inputmicroSDTM cardGPIO expansion connector (Raspberry Pi\u00ae shields capability)ARDUINO\u00ae Uno V3 expansion connectors On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: Virtual COM port and debug port STM32CubeMP1 and full mainline open-source Linux\u00ae STM32 MPU OpenSTLinux Distribution (such as STM32MP1Starter) software and examples 4\" TFT 480\u00d7800 pixels with LED backlight, MIPI DSISM interface, and capacitive touch panel Wi-Fi\u00ae 802.11b/g/n Bluetooth Low Energy 4.1","title":"Introduction"},{"location":"about/","text":"About Me! Hey there! My name is Deepak Reddy and I maintain this documentation. I hold an undergraduate degree in Electrical and Electronics Engineering and I worked as a Hardware Design Engineer for 4 years in a startup. Recently I came accross the ST's line of Microprocessors and I felt it fascinating. I personally felt this is one of the best Microprocessor out there in the market as it is the combination of a MPU and MCU. This combination has many use cases and I felt I should try this out. So I bought STM32MP157C-DK2 development board and started experimenting. This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!)","title":"About"},{"location":"about/#about-me","text":"Hey there! My name is Deepak Reddy and I maintain this documentation. I hold an undergraduate degree in Electrical and Electronics Engineering and I worked as a Hardware Design Engineer for 4 years in a startup. Recently I came accross the ST's line of Microprocessors and I felt it fascinating. I personally felt this is one of the best Microprocessor out there in the market as it is the combination of a MPU and MCU. This combination has many use cases and I felt I should try this out. So I bought STM32MP157C-DK2 development board and started experimenting. This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!)","title":"About Me!"},{"location":"getting_started/","text":"Getting started with STM32MP157CDK-2 Required Equipment The following table lists the required equipment to start playing with your STM32MP157C-DK2 board. Connection Connect the micro USB Type-B to USB Type-A cable between your laptop and the ST-LINK/V2-1 port of the board Connect the USB Type-C\u2122 to USB Type-C\u2122 cable to the 5V/3A power supply Connect the USB Type-C\u2122 to USB Type-A cable betweenn your laptop and the USB Type-C\u2122 OTG port of the board Optionally connect the Ethernet cable between your Ethernet network and the Ethernet port of the board If the board power supply doesn't supply enough current (3A), the red LED indicates the issue following the rules below: Execute Basic Commands This stage explains how to connect the Linux\u00ae terminal of your board to your host computer through the ST-LINK/V2-1. Then you will see how to execute basic commands with the Linux command line interface in order to be familiarized with the Linux console. The Serial Terminal The serial terminal allows to communicate with the board trough a UART serial interface. On Mac/Linux install minicom by running the following commands respectively $ sudo apt-get install minicom for Linux. $ brew install minicom for Mac. Get the port on which the device is connected by running the following command $ ls /dev/tty* Tip Run the command again by disconnecting the dev board from the host computer and notice which port is not listed. The missing port ID is your desired port ID. In my case the port is /dev/tty.usbmodem142202 Connect minicom to the /dev/tty.usbmodem142202 device by running the following command: minicom -D /dev/tty.usbmodem142202 The output screen will be as follows: $ minicom -D /dev/tty.usbmodem142202 Welcome to minicom 2.8 OPTIONS: I18n Compiled on Nov 15 2018, 20:18:47. Port /dev/tty.usbmodem142202, 15:56:03 Press CTRL-A Z for help on special keys Press the reset button to reset the board. You should see boot log displayed in the minicom window in your host computer. Connect using SSH This feature works only if the ethernet cable is connected to the board. Determine the board's IP Address by running the following command in board using the serial terminal $ ip addr show eth0 The following code is displayed in your serial terminal. 3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff inet xx.xx.xx.xx/xx brd xx.xx.xx.xx scope global dynamic eth0 valid_lft 159045sec preferred_lft 159045sec inet6 xxxx::xx:xx:xx:xx/64 scope link valid_lft forever preferred_lft forever inet xx.xx.xx.xx/xx is your board's IP address. On the host computer connect the terminal to the board using ssh $ ssh root@xx.xx.xx.xx root@stm32mp1:~# Basic Commands Printing distribution specific information $ cat /etc/build ----------------------- Build Configuration: | ----------------------- BB_VERSION = 1.46.0 BUILD_SYS = x86_64-linux NATIVELSBSTRING = universal TARGET_SYS = arm-ostl-linux-gnueabi MACHINE = stm32mp1 DISTRO = openstlinux-weston DISTRO_VERSION = 3.1-openstlinux-5.10-dunfell-mp1-21-03-31 TUNE_FEATURES = arm vfp cortexa7 neon vfpv4 thumb callconvention-hard TARGET_FPU = hard MANIFESTVERSION = ostl-21-03-31-rc4-2-g7ef7d27 DISTRO_CODENAME = dunfell ACCEPT_EULA_stm32mp1 = 1 GCCVERSION = 9.% PREFERRED_PROVIDER_virtual/kernel = linux-stm32mp PREFERRED_VERSION_linux-stm32mp = ----------------------- Layer Revisions: | ----------------------- meta-python = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-oe = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-gnome = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-initramfs = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-multimedia = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-networking = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-webserver = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-filesystems = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-perl = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-st-stm32mp = default.xml:2e80e33539a193c6a8add6131c4c760009c49cea meta-qt5 = default.xml:0d8eb956015acdea7e77cd6672d08dce18061510 meta-st-openstlinux = default.xml:673d7ee4572e3faadec3e43d5f0fa004465b78d9 meta = default.xml:72431ee8de5e3a53d259cebf420a7713ac9e1f14 Printing System Information $ uname -a Linux stm32mp1 5.10.10 #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 armv7l armv7l armv7l GNU/Linux Printing Linux Kernal and GCC versions $ cat /proc/version Linux version 5.10.10 (oe-user@oe-host) (arm-ostl-linux-gnueabi-gcc (GCC) 9.3.0, GNU ld (GNU Binutils) 2.34.0.20200220) #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 Printing the amount of disk space available on all mounted file systems $ df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 147M 0 147M 0% /dev /dev/mmcblk0p6 690M 424M 220M 66% / tmpfs 214M 64K 214M 1% /dev/shm tmpfs 214M 8.8M 205M 5% /run tmpfs 214M 0 214M 0% /sys/fs/cgroup tmpfs 214M 20K 214M 1% /tmp /dev/mmcblk0p4 58M 14M 40M 27% /boot /dev/mmcblk0p5 15M 6.8M 6.7M 51% /vendor tmpfs 214M 144K 214M 1% /var/volatile /dev/mmcblk0p7 28G 38M 26G 1% /usr/local tmpfs 43M 0 43M 0% /run/user/0","title":"Getting Started"},{"location":"getting_started/#getting-started-with-stm32mp157cdk-2","text":"","title":"Getting started with STM32MP157CDK-2"},{"location":"getting_started/#required-equipment","text":"The following table lists the required equipment to start playing with your STM32MP157C-DK2 board.","title":"Required Equipment"},{"location":"getting_started/#connection","text":"Connect the micro USB Type-B to USB Type-A cable between your laptop and the ST-LINK/V2-1 port of the board Connect the USB Type-C\u2122 to USB Type-C\u2122 cable to the 5V/3A power supply Connect the USB Type-C\u2122 to USB Type-A cable betweenn your laptop and the USB Type-C\u2122 OTG port of the board Optionally connect the Ethernet cable between your Ethernet network and the Ethernet port of the board If the board power supply doesn't supply enough current (3A), the red LED indicates the issue following the rules below:","title":"Connection"},{"location":"getting_started/#execute-basic-commands","text":"This stage explains how to connect the Linux\u00ae terminal of your board to your host computer through the ST-LINK/V2-1. Then you will see how to execute basic commands with the Linux command line interface in order to be familiarized with the Linux console.","title":"Execute Basic Commands"},{"location":"getting_started/#the-serial-terminal","text":"The serial terminal allows to communicate with the board trough a UART serial interface. On Mac/Linux install minicom by running the following commands respectively $ sudo apt-get install minicom for Linux. $ brew install minicom for Mac. Get the port on which the device is connected by running the following command $ ls /dev/tty* Tip Run the command again by disconnecting the dev board from the host computer and notice which port is not listed. The missing port ID is your desired port ID. In my case the port is /dev/tty.usbmodem142202 Connect minicom to the /dev/tty.usbmodem142202 device by running the following command: minicom -D /dev/tty.usbmodem142202 The output screen will be as follows: $ minicom -D /dev/tty.usbmodem142202 Welcome to minicom 2.8 OPTIONS: I18n Compiled on Nov 15 2018, 20:18:47. Port /dev/tty.usbmodem142202, 15:56:03 Press CTRL-A Z for help on special keys Press the reset button to reset the board. You should see boot log displayed in the minicom window in your host computer.","title":"The Serial Terminal"},{"location":"getting_started/#connect-using-ssh","text":"This feature works only if the ethernet cable is connected to the board. Determine the board's IP Address by running the following command in board using the serial terminal $ ip addr show eth0 The following code is displayed in your serial terminal. 3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff inet xx.xx.xx.xx/xx brd xx.xx.xx.xx scope global dynamic eth0 valid_lft 159045sec preferred_lft 159045sec inet6 xxxx::xx:xx:xx:xx/64 scope link valid_lft forever preferred_lft forever inet xx.xx.xx.xx/xx is your board's IP address. On the host computer connect the terminal to the board using ssh $ ssh root@xx.xx.xx.xx root@stm32mp1:~#","title":"Connect using SSH"},{"location":"getting_started/#basic-commands","text":"Printing distribution specific information $ cat /etc/build ----------------------- Build Configuration: | ----------------------- BB_VERSION = 1.46.0 BUILD_SYS = x86_64-linux NATIVELSBSTRING = universal TARGET_SYS = arm-ostl-linux-gnueabi MACHINE = stm32mp1 DISTRO = openstlinux-weston DISTRO_VERSION = 3.1-openstlinux-5.10-dunfell-mp1-21-03-31 TUNE_FEATURES = arm vfp cortexa7 neon vfpv4 thumb callconvention-hard TARGET_FPU = hard MANIFESTVERSION = ostl-21-03-31-rc4-2-g7ef7d27 DISTRO_CODENAME = dunfell ACCEPT_EULA_stm32mp1 = 1 GCCVERSION = 9.% PREFERRED_PROVIDER_virtual/kernel = linux-stm32mp PREFERRED_VERSION_linux-stm32mp = ----------------------- Layer Revisions: | ----------------------- meta-python = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-oe = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-gnome = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-initramfs = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-multimedia = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-networking = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-webserver = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-filesystems = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-perl = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-st-stm32mp = default.xml:2e80e33539a193c6a8add6131c4c760009c49cea meta-qt5 = default.xml:0d8eb956015acdea7e77cd6672d08dce18061510 meta-st-openstlinux = default.xml:673d7ee4572e3faadec3e43d5f0fa004465b78d9 meta = default.xml:72431ee8de5e3a53d259cebf420a7713ac9e1f14 Printing System Information $ uname -a Linux stm32mp1 5.10.10 #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 armv7l armv7l armv7l GNU/Linux Printing Linux Kernal and GCC versions $ cat /proc/version Linux version 5.10.10 (oe-user@oe-host) (arm-ostl-linux-gnueabi-gcc (GCC) 9.3.0, GNU ld (GNU Binutils) 2.34.0.20200220) #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 Printing the amount of disk space available on all mounted file systems $ df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 147M 0 147M 0% /dev /dev/mmcblk0p6 690M 424M 220M 66% / tmpfs 214M 64K 214M 1% /dev/shm tmpfs 214M 8.8M 205M 5% /run tmpfs 214M 0 214M 0% /sys/fs/cgroup tmpfs 214M 20K 214M 1% /tmp /dev/mmcblk0p4 58M 14M 40M 27% /boot /dev/mmcblk0p5 15M 6.8M 6.7M 51% /vendor tmpfs 214M 144K 214M 1% /var/volatile /dev/mmcblk0p7 28G 38M 26G 1% /usr/local tmpfs 43M 0 43M 0% /run/user/0","title":"Basic Commands"},{"location":"linux_knowledge/","text":"Linux Introduction Welcome to Introduction to Linux section! Here you\u2019ll find some general linux concepts which will come in handy when we dive deeper into working with STM32MP1 DK. Common Linux Commands The Shell The shell is basically a program that takes your commands from the keyboard and sends them to the operating system to perform. If you\u2019ve ever used a GUI, you\u2019ve probably seen programs such as \u201cTerminal\u201d or \u201cConsole\u201d these are just programs that launch a shell for you. Depending on the distribution your shell prompt might change, but for the most part it should adhere to the following format: username@hostname:current_directory deepak@STM32MP1:/home $ Notice the $ at the end of the prompt? Different shells will have different prompts, in our case: the $ is for a normal user the # is for a root user Let\u2019s start with a simple command, echo. The echo command just prints out the text arguments to the display. $ echo Hello World Hello World pwd (Print Working Directory) Everything in Linux is a file. Every file is organized in a hierarchical directory tree. The first directory in the filesystem is aptly named the root directory. The root directory has many folders and files which you can store more folders and files, etc. Here is an example of what the directory tree looks like: / |-- bin | |-- file1 | |-- file2 |-- etc | |-- file3 | -- directory1 | |-- file4 | -- file5 |-- home |-- var The location of these files and directories are referred to as paths. If you had a folder named home with a folder inside of it named etc and another folder in that folder called sys , that path would look like this: /home/etc/sys Navigation of the filesystem, much like real life is helpful if you know where you are and where you are going. To see where you are, you can use the pwd command, this command means \u201cprint working directory\u201d and it just shows you which directory you are in, note the path stems from the root directory. $pwd /home/root cd (Change Directory) Now that you know where you are, let\u2019s see if we can move around the filesystem a bit. There are two different ways to specify a path, with absolute and relative paths. Absolute path : This is the path from the root directory. The root is the head or parent directory. The root directory is commonly shown as a slash / . Every time your path starts with / it means you are starting from the root directory. For example, /home/deepak/Desktop . Relative path : This is the path from where you are currently in filesystem. If I was in location /home/deepak/Documents and wanted to get to a directory inside Documents called files , I don\u2019t have to specify the whole path from root like /home/deepak/Documents/files , I can just go to files/ instead. cd /home/root It can get pretty tiring navigating with absolute and relative paths all the time, luckily there are some shortcuts to help you out. . (current directory). This is the directory you are currently in. .. (parent directory). Takes you to the directory above your current. ~ (home directory). This directory defaults to your \u201chome directory\u201d. Such as /home/deepak. - (previous directory). This will take you to the previous directory you were just at. cd (home directory). This is another way to go to home directory. $ cd . $ cd .. $ cd ~ $ cd - ls (List Directories) Now that we know how to move around the system, how do we figure out what is available to us? The ls command will list directories and files in the current directory by default, however you can specify which path you want to list the directories of. $ ls bin dev home lost+found mnt root sbin tmp var boot etc lib media proc run sys usr vendor $ ls /home/deepak example_file_1 example_file_2 Also note that not all files in a directory will be visible. Filenames that start with . are hidden, you can view them however with the ls command and pass the -a flag to it (a for all). $ ls -a There is also one more useful ls flag, -l for long, this shows a detailed list of files in a long format. This will show you detailed information, starting from the left: file permissions , number of links , owner name , owner group , file size , timestamp of last modification , and file/directory name $ ls -l total 37 drwxr-xr-x 2 root root 5120 Mar 9 2018 bin drwxr-xr-x 18 root root 1024 Mar 15 2019 boot drwxr-xr-x 13 root root 13840 Apr 9 02:28 dev drwxr-xr-x 44 root root 4096 Mar 2 2019 etc drwxr-xr-x 3 root root 1024 Mar 9 2018 home drwxr-xr-x 12 root root 4096 Mar 9 2018 lib drwx------ 2 root root 12288 Mar 15 2019 lost+found drwxr-xr-x 2 root root 1024 Mar 9 2018 media drwxr-xr-x 2 root root 1024 Mar 9 2018 mnt dr-xr-xr-x 133 root root 0 Jan 1 1970 proc drwxr-xr-x 5 root root 1024 Apr 8 07:48 root drwxr-xr-x 13 root root 380 Apr 9 02:29 run drwxr-xr-x 3 root root 4096 Mar 9 2018 sbin dr-xr-xr-x 12 root root 0 Jan 1 2000 sys drwxrwxrwt 7 root root 180 Apr 9 09:43 tmp drwxr-xr-x 11 root root 1024 Mar 9 2018 usr drwxr-xr-x 9 root root 1024 Mar 2 2019 var drwxr-xr-x 4 root root 1024 Mar 15 2019 vendor Commands have things called flags (or arguments or options, whatever you want to call it) to add more functionality. You can add them both together. For example, -la . The order of the flags determines which order it goes in. You can also do ls -al and it would still work. Run ls with different flags and see the output you receive. ls -R : recursively list directory contents ls -r : reverse order while sorting ls -t : sort by modification time, newest first touch Touch allows you to the create new empty files. $ touch mysuperduperfile Touch is also used to change timestamps on existing files and directories. Give it a try, do an ls -l on a file and note the timestamp, then touch that file and it will update the timestamp. file We learned about touch but did you notice that the filename didn\u2019t conform to standard naming like you\u2019ve probably seen with other operating systems like Windows? Normally you would expect a file called banana.jpeg and expect a JPEG picture file. In Linux, filenames aren\u2019t required to represent the contents of the file. You can create a file called funny.gif that isn\u2019t actually a GIF. To find out what kind of file a file is, you can use the file command. It will show you a description of the file\u2019s contents. $ file Documents Documents: directory cat Let\u2019s learn how to read a file. A simple command to use is the cat command, short for concatenate, it not only displays file contents but it can combine multiple files and show you the output of them. $ cat dogfile birdfile Tip It\u2019s not great for viewing large files and it\u2019s only meant for short content. There are many other tools that we use to view larger text files that we\u2019ll discuss later. less If you are viewing text files larger than a simple output then you can use less command. The text is displayed in a paged manner, so you can navigate through a text file page by page. Go ahead and look at the contents of a file with less. Once you\u2019re in the less command, you can actually use other keyboard commands to navigate in the file. $ less /home/deepak/Documents/text1 Use the following command to navigate through less: q - Used to quit out of less and go back to your shell. Page up , Page down , Up and Down - Navigate using the arrow keys and page keys. g - Moves to beginning of the text file. G - Moves to the end of the text file. /sometexttosearch - You can search for specific text inside the text document. Prefacing the words you want to search with / h - If you need a little help about how to use less while you\u2019re in less, use help. history In your shell, there is a history of the commands that you previously entered, you can actually look through these commands. This is quite useful when you want to find and run a command you used previously without actually typing it again. $ history Want to run the same command you did before, just hit the up arrow. Want to run the previous command without typing it again? Use !! If you typed cat file1 and want to run it again, you can actually just go !! and it will run the last command. Another history shortcut is ctrl-R , this is the reverse search command, if you hit ctrl-R and you start typing parts of the command you want it will show you matches and you can just navigate through them by hitting the ctrl-R key again. Once you found the command you want to use again, just hit the Enter key. Tip If the terminal window gets cluttered, use the $ clear command to clear up your display. While we are talking about useful things, one of the most useful features in any command-line environment is tab completion. If you start typing the beginning of a command, file, directory, etc and hit the Tab key, it will autocomplete based on what it finds in the directory you are searching as long as you don\u2019t have any other files that start with those letters. For example if you were trying to run the command chrome, you can type chr and press Tab and it will autocomplete chrome. cp (Copy) Use copy command to copy files from one location to other location. $ cp mycoolfile /home/deepak/documents/cooldocs mycoolfile is the file you want to copy and /home/deepak/Documents/cooldocs is where you are copying the file to. Wildcard - A wildcard is a character that can be substituted for a pattern based selection, giving you more flexibility with searches. You can use wildcards in every command for more flexibility. * the wildcard of wildcards, it's used to represent all single characters or any string. ? used to represent one character [] used to represent any character within the brackets $ cp *.jpg /home/deepak/Pictures This will copy all files with the .jpg extension in your current directory to the Pictures directory. Copying Directories A useful command is to use the -r flag, this will recursively copy the files and directories within a directory. $ cp -r Pumpkin/ /home/deepak/Documents One thing to note, if you copy a file over to a directory that has the same filename, the file will be overwritten with whatever you are copying over. Inorder to avoid that you can use the -i flag (interactive) to prompt you before overwriting a file. $ cp -i mycoolfile /home/deepak/Pictures mv (Move) Used for moving files and also renaming them. Quite similar to the cp command in terms of flags and functionality. Rename File You can rename files like this: $ mv oldfile newfile Or you can actually move a file to a different directory: $ mv file2 /home/deepak/Documents And move more than one file: $ mv file_1 file_2 /somedirectory Rename Directory You can rename directories as well: $ mv directory1 directory2 Like cp , if you mv a file or directory it will overwrite anything in the same directory. So you can use the -i flag to prompt you before overwriting anything. $ mv -i directory1 directory2 Create a Backup File Let\u2019s say you did want to mv a file to overwrite the previous one. You can also make a backup of that file and it will just rename the old version with a ~ $ mv -b directory1 directory2 mkdir (Make Directory) We might need some directories to store all the files we\u2019ve been working on. The mkdir command (Make Directory) is useful for that, it will create a directory if it doesn\u2019t exist. Multiple Directories You can even make multiple directories at the same time. $ mkdir books paintings Sub Directories You can also create subdirectories at the same time with the -p (parent flag) $ mkdir -p books/hemmingway/favorites rm (Remove) To remove files you can use the rm command. The rm (remove) command is used to delete files and directories. $ rm file1 Warning Take caution when using rm , you cannot undo once done. Be careful. Fortunately there are some safety measures put into place, so you can\u2019t just remove a bunch of important files. Write-protected files will prompt you for confirmation before deleting them. If a directory is write-protected it will also not be easily removed. Now if you don\u2019t care about any of that, you can absolutely remove a bunch of files. $ rm -f file1 -f or force option tells rm to remove all files, whether they are write protected or not, without prompting the user (as long as you have the appropriate permissions). $ rm -i file Adding the -i flag like many of the other commands, will give you a prompt on whether you want to actually remove the files or directories. $ rm -r directory You can\u2019t just rm a directory by default, you\u2019ll need to add the -r flag (recursive) to remove all the files and any subdirectories it may have. You can remove a directory with the rmdir command. $ rmdir directory find With all the files we have on the system it can get a little hectic trying to find a specific one. Well there\u2019s a command we can use for that, find $ find /home -name puppies.jpg With find you\u2019ll have to specify the directory you\u2019ll be searching it, what you\u2019re searching for, in this case we are trying to find a file by the name of puppies.jpg You can specify what type of file you are trying to find. $ find /home -type d -name MyFolder You can see that I set the type of file I\u2019m trying to find as d for directory and I\u2019m still searching by the name of MyFolder . One cool thing to note is that find doesn\u2019t stop at the directory you are searching, it will look inside any subdirectories that directory may have as well. help Linux has some great built-in tools to help you how to use a command or check what flags are available for a command. One tool, help , is a built-in bash command that provides help for other bash commands (echo, logout, pwd, etc). $ help echo This will give you a description and the options you can use when you want to run echo . For other executable programs, it\u2019s convention to have an option called --help or something similar. $ echo --help Not all developers who ship out executables will conform to this standard, but it\u2019s probably your best shot to find some help on a program. man You can see the manuals for a command with the man command. $ man ls Man pages are manuals that are by default built into most Linux operating systems. They provide documentation about commands and other aspects of the system. whatis If you are ever feeling doubtful about what a command does, you can use the whatis command. The whatis command provides a brief description of command line programs. $ whatis cat The description gets sourced from the manual page of each command. If you ran whatis cat , you\u2019d see there is a small blurb with a short description. alias Sometimes typing commands can get really repetitive, or if you need to type a long command many times, it\u2019s best to have an alias you can use for that. To create an alias for a command you simply specify an alias name and set it to the command. $ alias foobar='ls -la' Now instead of typing ls -la , you can type foobar and it will execute that command. Keep in mind that this command won't save your alias after reboot, so you'll need to add a permanent alias in: ~/.bashrc or similar files if you want to have it persist after reboot. You can remove aliases with the unalias command: $ unalias foobar exit To exit from the shell, you can use the exit command $ exit Or the logout command $ logout Or if you are working out of a terminal GUI, you can just close the terminal.","title":"Some Linux Knowledge"},{"location":"linux_knowledge/#linux-introduction","text":"Welcome to Introduction to Linux section! Here you\u2019ll find some general linux concepts which will come in handy when we dive deeper into working with STM32MP1 DK.","title":"Linux Introduction"},{"location":"linux_knowledge/#common-linux-commands","text":"","title":"Common Linux Commands"},{"location":"linux_knowledge/#the-shell","text":"The shell is basically a program that takes your commands from the keyboard and sends them to the operating system to perform. If you\u2019ve ever used a GUI, you\u2019ve probably seen programs such as \u201cTerminal\u201d or \u201cConsole\u201d these are just programs that launch a shell for you. Depending on the distribution your shell prompt might change, but for the most part it should adhere to the following format: username@hostname:current_directory deepak@STM32MP1:/home $ Notice the $ at the end of the prompt? Different shells will have different prompts, in our case: the $ is for a normal user the # is for a root user Let\u2019s start with a simple command, echo. The echo command just prints out the text arguments to the display. $ echo Hello World Hello World","title":"The Shell"},{"location":"linux_knowledge/#pwd-print-working-directory","text":"Everything in Linux is a file. Every file is organized in a hierarchical directory tree. The first directory in the filesystem is aptly named the root directory. The root directory has many folders and files which you can store more folders and files, etc. Here is an example of what the directory tree looks like: / |-- bin | |-- file1 | |-- file2 |-- etc | |-- file3 | -- directory1 | |-- file4 | -- file5 |-- home |-- var The location of these files and directories are referred to as paths. If you had a folder named home with a folder inside of it named etc and another folder in that folder called sys , that path would look like this: /home/etc/sys Navigation of the filesystem, much like real life is helpful if you know where you are and where you are going. To see where you are, you can use the pwd command, this command means \u201cprint working directory\u201d and it just shows you which directory you are in, note the path stems from the root directory. $pwd /home/root","title":"pwd (Print Working Directory)"},{"location":"linux_knowledge/#cd-change-directory","text":"Now that you know where you are, let\u2019s see if we can move around the filesystem a bit. There are two different ways to specify a path, with absolute and relative paths. Absolute path : This is the path from the root directory. The root is the head or parent directory. The root directory is commonly shown as a slash / . Every time your path starts with / it means you are starting from the root directory. For example, /home/deepak/Desktop . Relative path : This is the path from where you are currently in filesystem. If I was in location /home/deepak/Documents and wanted to get to a directory inside Documents called files , I don\u2019t have to specify the whole path from root like /home/deepak/Documents/files , I can just go to files/ instead. cd /home/root It can get pretty tiring navigating with absolute and relative paths all the time, luckily there are some shortcuts to help you out. . (current directory). This is the directory you are currently in. .. (parent directory). Takes you to the directory above your current. ~ (home directory). This directory defaults to your \u201chome directory\u201d. Such as /home/deepak. - (previous directory). This will take you to the previous directory you were just at. cd (home directory). This is another way to go to home directory. $ cd . $ cd .. $ cd ~ $ cd -","title":"cd (Change Directory)"},{"location":"linux_knowledge/#ls-list-directories","text":"Now that we know how to move around the system, how do we figure out what is available to us? The ls command will list directories and files in the current directory by default, however you can specify which path you want to list the directories of. $ ls bin dev home lost+found mnt root sbin tmp var boot etc lib media proc run sys usr vendor $ ls /home/deepak example_file_1 example_file_2 Also note that not all files in a directory will be visible. Filenames that start with . are hidden, you can view them however with the ls command and pass the -a flag to it (a for all). $ ls -a There is also one more useful ls flag, -l for long, this shows a detailed list of files in a long format. This will show you detailed information, starting from the left: file permissions , number of links , owner name , owner group , file size , timestamp of last modification , and file/directory name $ ls -l total 37 drwxr-xr-x 2 root root 5120 Mar 9 2018 bin drwxr-xr-x 18 root root 1024 Mar 15 2019 boot drwxr-xr-x 13 root root 13840 Apr 9 02:28 dev drwxr-xr-x 44 root root 4096 Mar 2 2019 etc drwxr-xr-x 3 root root 1024 Mar 9 2018 home drwxr-xr-x 12 root root 4096 Mar 9 2018 lib drwx------ 2 root root 12288 Mar 15 2019 lost+found drwxr-xr-x 2 root root 1024 Mar 9 2018 media drwxr-xr-x 2 root root 1024 Mar 9 2018 mnt dr-xr-xr-x 133 root root 0 Jan 1 1970 proc drwxr-xr-x 5 root root 1024 Apr 8 07:48 root drwxr-xr-x 13 root root 380 Apr 9 02:29 run drwxr-xr-x 3 root root 4096 Mar 9 2018 sbin dr-xr-xr-x 12 root root 0 Jan 1 2000 sys drwxrwxrwt 7 root root 180 Apr 9 09:43 tmp drwxr-xr-x 11 root root 1024 Mar 9 2018 usr drwxr-xr-x 9 root root 1024 Mar 2 2019 var drwxr-xr-x 4 root root 1024 Mar 15 2019 vendor Commands have things called flags (or arguments or options, whatever you want to call it) to add more functionality. You can add them both together. For example, -la . The order of the flags determines which order it goes in. You can also do ls -al and it would still work. Run ls with different flags and see the output you receive. ls -R : recursively list directory contents ls -r : reverse order while sorting ls -t : sort by modification time, newest first","title":"ls (List Directories)"},{"location":"linux_knowledge/#touch","text":"Touch allows you to the create new empty files. $ touch mysuperduperfile Touch is also used to change timestamps on existing files and directories. Give it a try, do an ls -l on a file and note the timestamp, then touch that file and it will update the timestamp.","title":"touch"},{"location":"linux_knowledge/#file","text":"We learned about touch but did you notice that the filename didn\u2019t conform to standard naming like you\u2019ve probably seen with other operating systems like Windows? Normally you would expect a file called banana.jpeg and expect a JPEG picture file. In Linux, filenames aren\u2019t required to represent the contents of the file. You can create a file called funny.gif that isn\u2019t actually a GIF. To find out what kind of file a file is, you can use the file command. It will show you a description of the file\u2019s contents. $ file Documents Documents: directory","title":"file"},{"location":"linux_knowledge/#cat","text":"Let\u2019s learn how to read a file. A simple command to use is the cat command, short for concatenate, it not only displays file contents but it can combine multiple files and show you the output of them. $ cat dogfile birdfile Tip It\u2019s not great for viewing large files and it\u2019s only meant for short content. There are many other tools that we use to view larger text files that we\u2019ll discuss later.","title":"cat"},{"location":"linux_knowledge/#less","text":"If you are viewing text files larger than a simple output then you can use less command. The text is displayed in a paged manner, so you can navigate through a text file page by page. Go ahead and look at the contents of a file with less. Once you\u2019re in the less command, you can actually use other keyboard commands to navigate in the file. $ less /home/deepak/Documents/text1 Use the following command to navigate through less: q - Used to quit out of less and go back to your shell. Page up , Page down , Up and Down - Navigate using the arrow keys and page keys. g - Moves to beginning of the text file. G - Moves to the end of the text file. /sometexttosearch - You can search for specific text inside the text document. Prefacing the words you want to search with / h - If you need a little help about how to use less while you\u2019re in less, use help.","title":"less"},{"location":"linux_knowledge/#history","text":"In your shell, there is a history of the commands that you previously entered, you can actually look through these commands. This is quite useful when you want to find and run a command you used previously without actually typing it again. $ history Want to run the same command you did before, just hit the up arrow. Want to run the previous command without typing it again? Use !! If you typed cat file1 and want to run it again, you can actually just go !! and it will run the last command. Another history shortcut is ctrl-R , this is the reverse search command, if you hit ctrl-R and you start typing parts of the command you want it will show you matches and you can just navigate through them by hitting the ctrl-R key again. Once you found the command you want to use again, just hit the Enter key. Tip If the terminal window gets cluttered, use the $ clear command to clear up your display. While we are talking about useful things, one of the most useful features in any command-line environment is tab completion. If you start typing the beginning of a command, file, directory, etc and hit the Tab key, it will autocomplete based on what it finds in the directory you are searching as long as you don\u2019t have any other files that start with those letters. For example if you were trying to run the command chrome, you can type chr and press Tab and it will autocomplete chrome.","title":"history"},{"location":"linux_knowledge/#cp-copy","text":"Use copy command to copy files from one location to other location. $ cp mycoolfile /home/deepak/documents/cooldocs mycoolfile is the file you want to copy and /home/deepak/Documents/cooldocs is where you are copying the file to. Wildcard - A wildcard is a character that can be substituted for a pattern based selection, giving you more flexibility with searches. You can use wildcards in every command for more flexibility. * the wildcard of wildcards, it's used to represent all single characters or any string. ? used to represent one character [] used to represent any character within the brackets $ cp *.jpg /home/deepak/Pictures This will copy all files with the .jpg extension in your current directory to the Pictures directory. Copying Directories A useful command is to use the -r flag, this will recursively copy the files and directories within a directory. $ cp -r Pumpkin/ /home/deepak/Documents One thing to note, if you copy a file over to a directory that has the same filename, the file will be overwritten with whatever you are copying over. Inorder to avoid that you can use the -i flag (interactive) to prompt you before overwriting a file. $ cp -i mycoolfile /home/deepak/Pictures","title":"cp (Copy)"},{"location":"linux_knowledge/#mv-move","text":"Used for moving files and also renaming them. Quite similar to the cp command in terms of flags and functionality. Rename File You can rename files like this: $ mv oldfile newfile Or you can actually move a file to a different directory: $ mv file2 /home/deepak/Documents And move more than one file: $ mv file_1 file_2 /somedirectory Rename Directory You can rename directories as well: $ mv directory1 directory2 Like cp , if you mv a file or directory it will overwrite anything in the same directory. So you can use the -i flag to prompt you before overwriting anything. $ mv -i directory1 directory2 Create a Backup File Let\u2019s say you did want to mv a file to overwrite the previous one. You can also make a backup of that file and it will just rename the old version with a ~ $ mv -b directory1 directory2","title":"mv (Move)"},{"location":"linux_knowledge/#mkdir-make-directory","text":"We might need some directories to store all the files we\u2019ve been working on. The mkdir command (Make Directory) is useful for that, it will create a directory if it doesn\u2019t exist. Multiple Directories You can even make multiple directories at the same time. $ mkdir books paintings Sub Directories You can also create subdirectories at the same time with the -p (parent flag) $ mkdir -p books/hemmingway/favorites","title":"mkdir (Make Directory)"},{"location":"linux_knowledge/#rm-remove","text":"To remove files you can use the rm command. The rm (remove) command is used to delete files and directories. $ rm file1 Warning Take caution when using rm , you cannot undo once done. Be careful. Fortunately there are some safety measures put into place, so you can\u2019t just remove a bunch of important files. Write-protected files will prompt you for confirmation before deleting them. If a directory is write-protected it will also not be easily removed. Now if you don\u2019t care about any of that, you can absolutely remove a bunch of files. $ rm -f file1 -f or force option tells rm to remove all files, whether they are write protected or not, without prompting the user (as long as you have the appropriate permissions). $ rm -i file Adding the -i flag like many of the other commands, will give you a prompt on whether you want to actually remove the files or directories. $ rm -r directory You can\u2019t just rm a directory by default, you\u2019ll need to add the -r flag (recursive) to remove all the files and any subdirectories it may have. You can remove a directory with the rmdir command. $ rmdir directory","title":"rm (Remove)"},{"location":"linux_knowledge/#find","text":"With all the files we have on the system it can get a little hectic trying to find a specific one. Well there\u2019s a command we can use for that, find $ find /home -name puppies.jpg With find you\u2019ll have to specify the directory you\u2019ll be searching it, what you\u2019re searching for, in this case we are trying to find a file by the name of puppies.jpg You can specify what type of file you are trying to find. $ find /home -type d -name MyFolder You can see that I set the type of file I\u2019m trying to find as d for directory and I\u2019m still searching by the name of MyFolder . One cool thing to note is that find doesn\u2019t stop at the directory you are searching, it will look inside any subdirectories that directory may have as well.","title":"find"},{"location":"linux_knowledge/#help","text":"Linux has some great built-in tools to help you how to use a command or check what flags are available for a command. One tool, help , is a built-in bash command that provides help for other bash commands (echo, logout, pwd, etc). $ help echo This will give you a description and the options you can use when you want to run echo . For other executable programs, it\u2019s convention to have an option called --help or something similar. $ echo --help Not all developers who ship out executables will conform to this standard, but it\u2019s probably your best shot to find some help on a program.","title":"help"},{"location":"linux_knowledge/#man","text":"You can see the manuals for a command with the man command. $ man ls Man pages are manuals that are by default built into most Linux operating systems. They provide documentation about commands and other aspects of the system.","title":"man"},{"location":"linux_knowledge/#whatis","text":"If you are ever feeling doubtful about what a command does, you can use the whatis command. The whatis command provides a brief description of command line programs. $ whatis cat The description gets sourced from the manual page of each command. If you ran whatis cat , you\u2019d see there is a small blurb with a short description.","title":"whatis"},{"location":"linux_knowledge/#alias","text":"Sometimes typing commands can get really repetitive, or if you need to type a long command many times, it\u2019s best to have an alias you can use for that. To create an alias for a command you simply specify an alias name and set it to the command. $ alias foobar='ls -la' Now instead of typing ls -la , you can type foobar and it will execute that command. Keep in mind that this command won't save your alias after reboot, so you'll need to add a permanent alias in: ~/.bashrc or similar files if you want to have it persist after reboot. You can remove aliases with the unalias command: $ unalias foobar","title":"alias"},{"location":"linux_knowledge/#exit","text":"To exit from the shell, you can use the exit command $ exit Or the logout command $ logout Or if you are working out of a terminal GUI, you can just close the terminal.","title":"exit"},{"location":"reference/","text":"External References Websites STM32MP157C-DK2 official website STM32MPU Wiki by ST STM32MP157C Chipset Docs Development Board: Data Brief (PDF) User Manual UM2534 (PDF) MPU: STM32MP157C DataSheet DS12505(PDF) Reference Manual RM0436 (PDF) Application Notes TO BE ADDED CAD Resources Board Manufacturing: Board Design Project Files 1.0 MB1407 Board Manufacturing Files 1.0 MB1407 Bill of Materials: BOM MB1407 Schematics: Schematic MB1407 (PDF) Tools and Softwares MCU and MPU Embedded Software STM32CubeMP1 Package for STM32MP1 series STM32MP1 OpenSTLinux Developer Package STM32MP1 OpenSTLinux Distribution Package STM32MP1 OpenSTLinux Starter Package Software Development Tools STM32CubeIDE System Work Bench for Linux STM32 Programmers Firmware upgrade STLINK USB Drivers for Windows","title":"External Reference"},{"location":"reference/#external-references","text":"","title":"External References"},{"location":"reference/#websites","text":"STM32MP157C-DK2 official website STM32MPU Wiki by ST STM32MP157C Chipset","title":"Websites"},{"location":"reference/#docs","text":"Development Board: Data Brief (PDF) User Manual UM2534 (PDF) MPU: STM32MP157C DataSheet DS12505(PDF) Reference Manual RM0436 (PDF) Application Notes TO BE ADDED","title":"Docs"},{"location":"reference/#cad-resources","text":"Board Manufacturing: Board Design Project Files 1.0 MB1407 Board Manufacturing Files 1.0 MB1407 Bill of Materials: BOM MB1407 Schematics: Schematic MB1407 (PDF)","title":"CAD Resources"},{"location":"reference/#tools-and-softwares","text":"MCU and MPU Embedded Software STM32CubeMP1 Package for STM32MP1 series STM32MP1 OpenSTLinux Developer Package STM32MP1 OpenSTLinux Distribution Package STM32MP1 OpenSTLinux Starter Package Software Development Tools STM32CubeIDE System Work Bench for Linux STM32 Programmers Firmware upgrade STLINK USB Drivers for Windows","title":"Tools and Softwares"},{"location":"stm32mp1_series/","text":"The STM32MP1 Microprocessor Series 10 Year Longitivity Commitment by ST The STM32MP1 series is available in 3 different lines which are pin-to-pin compatible: STM32MP157: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz, 3D GPU, DSI display interface and CAN FD STM32MP153: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz and CAN FD STM32MP151: Single Cortex-A7 core up to @ 800 MHz, Cortex-M4 core @ 209 MHz STM32MP1 Series Comparision Flexible architecture The single or dual Cortex-A7 cores are dedicated to open-source operating systems while the Cortex-M4 core is dedicated to real-time and low-power tasks. Dual Cortex\u00ae-A7 cores running at 800 MHz\u00df\u00df 32-Kbyte L1 Instruction cache 32-Kbyte L1 Data cache 256-Kbyte Level 2 cache Cortex\u00ae-M4 core running at 209 MHz\u00df a single-precision floating point unit (FPU) a full set of digital signal processor (DSP) instructions memory protection unit for enhanced application security","title":"STM32MP1 Microprocessor Series"},{"location":"stm32mp1_series/#the-stm32mp1-microprocessor-series","text":"","title":"The STM32MP1 Microprocessor Series"},{"location":"stm32mp1_series/#10-year-longitivity-commitment-by-st","text":"The STM32MP1 series is available in 3 different lines which are pin-to-pin compatible: STM32MP157: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz, 3D GPU, DSI display interface and CAN FD STM32MP153: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz and CAN FD STM32MP151: Single Cortex-A7 core up to @ 800 MHz, Cortex-M4 core @ 209 MHz","title":"10 Year Longitivity Commitment by ST"},{"location":"stm32mp1_series/#stm32mp1-series-comparision","text":"","title":"STM32MP1 Series Comparision"},{"location":"stm32mp1_series/#flexible-architecture","text":"The single or dual Cortex-A7 cores are dedicated to open-source operating systems while the Cortex-M4 core is dedicated to real-time and low-power tasks. Dual Cortex\u00ae-A7 cores running at 800 MHz\u00df\u00df 32-Kbyte L1 Instruction cache 32-Kbyte L1 Data cache 256-Kbyte Level 2 cache Cortex\u00ae-M4 core running at 209 MHz\u00df a single-precision floating point unit (FPU) a full set of digital signal processor (DSP) instructions memory protection unit for enhanced application security","title":"Flexible architecture"}]}